# Minimizer config
[Minimizer]

minimizer = "Minuit2"
algorithm = "Migrad"
likelihood = "Poisson"
print_level = 2
tolerance = 1E-6
strategy = 1
max_iter = 1E6
max_fcn = 1E9
# Poisson statistical fluctuation in data
stat_fluc = false

# Optional MCMC method to estimate the fit uncertainty, only useful when MCMCSteps>0
MCMCSteps = 0
# Two step proposal options are available: "adaptive" and "fixed"
# "adaptive" uses the TSimpleMCMC class and automatically adjusts the size size as the chain walks
# "fixed" uses the step size defined by MCMCStepSize, may need to tune this number to get a reasonable acceptance
MCMCProposal = "adaptive"
MCMCStepSize = 0.3

# Optional 1D parameter scan around the minimum point, only useful when ScanSteps>0
# ParameterScans is the vector of integers corresponding to parameter indices to scan
# Indices run from 0 according to the order of the fit parameters declared below
ScanSteps = 0
ParameterScans = []

# List of PMT samples input to the fitter
# Each sample contains the PMT hits and geometry information of a particular source-PMT setup
[samples]

# Names of samples
names = [
    "BnL_PMT",
    "mPMT"
]

# Entry for each sample name
# Each entry is specified as:
# [pmt_type, input_file, pmt_hit_tree_name, pmt_geo_treename, [vectors of cut], [binning_config], optional_config ]
# pmt_type: 0 = B&L PMT, 1 = mPMT
# input_file, pmt_hit_tree_name, pmt_geo_treename: input file and tree names
# [vectors of cut]: simple rectangular cuts to select events of interest, each cut is specified by [variable name, cut_low, cut_high]
# [binning_config] = [binning_file,[bin_vars]]: defines the sample binning, each bin sums over the number of PE observed in PMTs
# binning_file is the binning file input to BinManager class, [bin_vars] is the vector of binning variables
# first line in the binning_file defines the number of dimensions, each subsequent line defines the bin edges 
# If bin_vars="unbinned", each bin corresponds to a single PMT, regardless of what the binning_file is

# optional_config: optional configurations, in the format of [key, value]
# multiple options can be used at the same time
# Available options are:
# ["norm", double]: scale the number of hits in the whole sample
# ["mask", int]: Enabling only the specified number of PMTs (for mPMT, the entire module of 19 PMTs is enabled/disabled as a whole) 
# ["mask_mPMT", [int]]: Vector of integers to mask small PMTs in mPMT by mPMT_id
# ["mask_PMTid", file_name]: Mask PMTs by id listed in the file. Each line in the file contains a single PMT_id
# ["time_offset", width]: Random timetof offset per PMT, sampled from a Gaussian(mean = 0, sigma = width) => timetof = timetof + offset
# ["time_smear", mean, width]: Random timetof smearing per PMT, sampled from a Gaussian(mean, width) => timetof = timetof + gRandom->Gaus(0,smearing)
# ["z0", double]: set source Z-pos for fitting AttenuationZ
# ["pmt_eff", file_name, hist_name]: read the PMT relative efficiency. The histogram should be a TH1 with the x-axis being the PMT_id, bin content being the efficiency
# ["pmt_eff_var", sigma]: random variation of PMT efficiency around the nominal value => eff*=gRandom->Gaus(1,sigma)
# ["data_hist", hist_name]: load PMT hit data binned in histogram, to speed up the loading process. Need to run WCSIM_TreeConvert with -c option to produce such histogram

# Special optional to fit the indirect photon distribution
# ["template", file_name, hist_name, timetof_offset, combine_bool, template_only_bool]: fit the timetof distribution for indirect photon in each PMT
# AnaSample will load the template "hist_name" from file "file_name", which is a 2D histogram binned in timetof vs. PMT id
# The template contains the nominal MC prediction corresponding to nominal MC parameters
# The template prediction will be changed by fit parameters with "template_spline" option, and compared to data to determine best fit parameters
# timetof_offset: timetof offset between the template and data
# combine_bool: bool to combine all PMT bins into 1 for template fit
# template_only_bool: bool to include only the template part and ignore the direct PE part in likelihood
# See macro/build_template_and_spline.c for template and spline generation

# Special optional configuration for indirect photon subtraction
# Do not use both options together

# ["scatter_control", time1, time2, time3, correction_factor]: 
# Divide each bin into two, {time1,time2} corresponds to the signal region, {time2,time3} corresponds to the control region due to indirect photon
# Use control region to estimate the indirect photon background in signal region
# The PE prediction in the signal region is calculated as: PE_pred = PE_direct + PE{time2,time3}*correction_factor

# ["scatter_map", root_file_name, hist_name, time1, time2, time3]:
# Divide each bin into two, {time1,time2} corresponds to the signal region, {time2,time3} corresponds to the control region due to indirect photon
# Use control region to estimate the indirect photon background in signal region
# The PE prediction in the signal region is calculated as: PE_pred = PE_direct + PE{time2,time3}*correction_factor
# Use macro/make_scatter_map.c to generate the input histogram of correction_factor for each PMT
# Need to set likelihood to "Barlow" in order to correctly include MC statistical uncertainty in likelihood calculation

# The example here specifies two samples, from the same input file, but with different pmt tree names
# Three sets of cut are applied to the variables timetof, cosths, costh
# PMT binning is defined by sample_binning.txt, on the variables {costh, R}
BnL_PMT = [ 0, # pmt_type: 0 = B&L PMT, 1 = mPMT
            "out.root", "hitRate_pmtType0", "pmt_type0", # input_file, pmt_hit_tree_name, pmt_geo_treename: input file and tree names
            [["timetof",-950,-940], ["cosths",0.766,1], ["costh",0.5,1]], # [vectors of cut]
            ["sample_binning.txt",["costh","R"]],  # [binning_file,[bin_vars]]
            #["sample_binning.txt",["unbinned"]],  # do not apply PMT binning
            #["norm",2.0],       # simply scale up statistics by a factor of 2
            #["z0", 3267.55]: Z-pos of top injector
]
mPMT    = [ 1, 
            "out.root", "hitRate_pmtType1", "pmt_type1", 
            [["timetof",-950,-940], ["cosths",0.766,1], ["costh",0.5,1]], 
            ["sample_binning.txt",["costh","R"]],
            ["mask", 2000], # masking to only use 2000 mPMT in fit
            #["mask_mPMT", [0,12,18]] # masking to disable specific mPMT_id
]

# Number of small PMTs per mPMT module
nPMTpermPMT = 19


# List of fit parameters input to fitter
# Each parameter represents a multiplicative factor to parameterize the number of PE expected in each PMT
[fitparameters]

# Names of the class of fit parameters
names = [
    "norm",
    "alpha",
    # "alphaZ",
    "BnL_angular",
    # "BnLPMT_angular_pol",
    "mPMT_angular"
]

# Entry for each parameter class
# Each entry is specified as:
# [pmt_type, function_name, npar, [par_setup], [binning_config], optional_config]
# pmt_type: 0 = apply to B&L PMT only, 1 = apply to mPMT only, -1 = apply to both PMTs
# function_name: defines the functional form of the multiplicative factor derived from the fit parameter, modify AnaFitParameters class and ParameterFunction.hh to include new functions
# npar: number of parameters in this class
# [par_setup]: vector of fit parameter set, each parameter is specified as [parameter name, prior, step, limit_low, limit_high, fixed]
# if length of vector < npar, the last entry will be used to initialize all remaining parameters
# [binning_config]: defines the parameter mapping for each PMT, each PMT is affected by at most one parameter in each class

# optional_config
# ["covariance",fileName,matrixName] : optional config to load parameter prior covariance matrix
# ["prior",fileName,histname] : optional config to load parameter prior central values, overriding values in [par_setup]
# ["spline",fileName,splineName]: load the spline that only changes the direct photon prediction. No example yet 
# ["template_spline",fileName,splineName]: load the spline that only changes the template prediction. See macro/build_template_and_spline.c 

# The example here specifies four classes of parameters
# norm is the overall normalization for each sample, you may need to trial and error to get the prior right, or just calculate the exact values from the input MC
# alpha is the light attenuation parameter which parameterizes the scale factor as exp(-R/alpha)*omega
# BnL_angular and mPMT_angular are the angular response parameters. The parameter corresponding to costh={0.8,1} is fixed at 1.
# In this example, number of PE = norm*exp(-R/alpha)*omega*angular_response
norm         = [  -1,    # pmt_type: 0 = apply to B&L PMT only, 1 = apply to mPMT only, -1 = apply to both PMTs
                  "Identity",    # Identity is just a simple scale factor
                  2,  # npar: number of parameters in this class
                  [["BnL_norm", 1E6, 1E5, 0, 1E8, false], ["mPMT_norm", 1E6, 1E5, 0, 1E8, false]],  # [par_setup]: vector of fit parameter set
                  ["sampleId_binning.txt", ["sample"]], # binning by sample id
               ]
alpha        = [ -1, 
                 "Attenuation", # exp(-R/alpha)*omega
                 1, [["alpha", 10000, 10000, 0, 100000, false]] , ["R_binning.txt", ["R"]] ] # binning by R which is dummy because there is only one bin
BnL_angular  = [  0, "Identity",    6, [["BnL_angular1", 1, 0.1, 0, 10, false],  # 6 bins in costh
                                        ["BnL_angular2", 1, 0.1, 0, 10, false],
                                        ["BnL_angular3", 1, 0.1, 0, 10, false],
                                        ["BnL_angular4", 1, 0.1, 0, 10, false],
                                        ["BnL_angular5", 1, 0.1, 0, 10, false],
                                        ["BnL_angular6", 1, 0.1, 0, 10, true]] , ["BnL_costh_binning.txt",["costh"]] ]
mPMT_angular = [  1, "Identity",   10, [["mPMT_angular1",1, 0.1, 0, 10, false],  # 10 bins in costh
                                        ["mPMT_angular2",1, 0.1, 0, 10, false],
                                        ["mPMT_angular3",1, 0.1, 0, 10, false],
                                        ["mPMT_angular4",1, 0.1, 0, 10, false],
                                        ["mPMT_angular5",1, 0.1, 0, 10, false],
                                        ["mPMT_angular6",1, 0.1, 0, 10, false],
                                        ["mPMT_angular7",1, 0.1, 0, 10, false],
                                        ["mPMT_angular8",1, 0.1, 0, 10, false],
                                        ["mPMT_angular9",1, 0.1, 0, 10, false],
                                        ["mPMT_angular10",1, 0.1, 0, 10, true]] , ["costh_binning.txt",["costh"]] ]

# Special parameterization to fit angular response as piecewise continuous polynomial function of costh, similar to what fiTQun did
# Do not use this with the simple angular response parameter together
# npar is the number of segment
# each parameter now corresponds to the n-th order polynomial in the region {limit_low < costh < limit_high}
# only the prior and step of the first polynomial is applied to the p0 coefficient of the first polynomial
# example below consists of a 2nd order polynomial in [0.5,0.6], and a 3rd order polynomial in [0.6,1.0]
BnLPMT_angular_pol = [  0, # only apply to B&L PMT
                        "PolynomialCosth", # piecewise continuous polynomial function of costh
                        2, # number of segment
                        [ ["pol2",0.25, 0.1, 0.5, 0.6, false], # 2nd order polynomial in [0.5,0.6], with prior p0 = 0.25, step = 0.1
                          ["pol3",0.25, 0.1, 0.6, 1.0, false], # 3rd order polynomial in [0.6,1.0], prior is not used in fit
                        ] , 
                        ["R_binning.txt",    ["R"]] ]

# Special parameterization of attenuation length with a linear z-dependence
# first parameter is alpha at z=0, second parameter is slope => alpha(z) = alpha(0) + slope*z
# the attenuation factor now takes a more complicated form than just exp(-R/alpha)
alphaZ       = [ -1, "AttenuationZ", 2, [["alpha", 10650, 1000, 0, 100000, false],
                                         ["slope", 0.15, 0.01, -1, 1, false]], ["R_binning.txt",    ["R"]]     ]


# Second order correction to angular response of mPMTs
# Dependency on the PMT position within the mPMTs, i.e. innermost, middle and outermost rings
mPMT_id      = [  1, "Identity",   3,  [["mPMT_id_1",1, 0.1, 0, 10, true],
                                        ["mPMT_id_2",1, 0.1, 0, 10, false],
                                        ["mPMT_id_3",1, 0.1, 0, 10, false]] , ["mPMTid_binning.txt",["mPMT_id"]]]
# Dependency on the photon incident angle relative to the central PMT
phim         = [  1, "Identity",   11,  [["phim0",1, 0.1, 0, 10, true],
                                         #["phim1",1, 0.1, 0, 10, true],
                                         ["phim",1, 0.1, 0, 10, false]] , ["phim_binning.txt",["phim"]]]